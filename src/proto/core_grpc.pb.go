// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0
// source: src/proto/core.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MapReduceNodeClient is the client API for MapReduceNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapReduceNodeClient interface {
	AssignMapTask(ctx context.Context, in *AssignMapTaskRequest, opts ...grpc.CallOption) (*AssignMapTaskRequestReply, error)
}

type mapReduceNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewMapReduceNodeClient(cc grpc.ClientConnInterface) MapReduceNodeClient {
	return &mapReduceNodeClient{cc}
}

func (c *mapReduceNodeClient) AssignMapTask(ctx context.Context, in *AssignMapTaskRequest, opts ...grpc.CallOption) (*AssignMapTaskRequestReply, error) {
	out := new(AssignMapTaskRequestReply)
	err := c.cc.Invoke(ctx, "/core.MapReduceNode/AssignMapTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapReduceNodeServer is the server API for MapReduceNode service.
// All implementations must embed UnimplementedMapReduceNodeServer
// for forward compatibility
type MapReduceNodeServer interface {
	AssignMapTask(context.Context, *AssignMapTaskRequest) (*AssignMapTaskRequestReply, error)
	mustEmbedUnimplementedMapReduceNodeServer()
}

// UnimplementedMapReduceNodeServer must be embedded to have forward compatible implementations.
type UnimplementedMapReduceNodeServer struct {
}

func (UnimplementedMapReduceNodeServer) AssignMapTask(context.Context, *AssignMapTaskRequest) (*AssignMapTaskRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignMapTask not implemented")
}
func (UnimplementedMapReduceNodeServer) mustEmbedUnimplementedMapReduceNodeServer() {}

// UnsafeMapReduceNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapReduceNodeServer will
// result in compilation errors.
type UnsafeMapReduceNodeServer interface {
	mustEmbedUnimplementedMapReduceNodeServer()
}

func RegisterMapReduceNodeServer(s grpc.ServiceRegistrar, srv MapReduceNodeServer) {
	s.RegisterService(&MapReduceNode_ServiceDesc, srv)
}

func _MapReduceNode_AssignMapTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignMapTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapReduceNodeServer).AssignMapTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.MapReduceNode/AssignMapTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapReduceNodeServer).AssignMapTask(ctx, req.(*AssignMapTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MapReduceNode_ServiceDesc is the grpc.ServiceDesc for MapReduceNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapReduceNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "core.MapReduceNode",
	HandlerType: (*MapReduceNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignMapTask",
			Handler:    _MapReduceNode_AssignMapTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/proto/core.proto",
}
